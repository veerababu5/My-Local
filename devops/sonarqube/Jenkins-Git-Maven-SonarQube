>> First Setup the SonarQube Server Using Below steps.

Installing SonarQube
In this document we would install sonarqube as referred over here 

>> Steps for the installation on ubuntu are add the following line to the file @ /etc/apt/sources.list: deb [trusted=yes] http://downloads.sourceforge.net/project/sonar-pkg/deb  binary/

#sudo apt-get update
#sudo apt-get install openjdk-8-jdk
#sudo apt-get install sonar=6.7.4
#sudo service sonar start
 >>The default user name and password is admin. Now navigate to http://<ipaddress&gt;:9000

Once you login with default credentials

you will be asked to provide a token
------------------------------------------------------------
#test-token: 2aee6caf3151d13f13815a1300a1f82646352869
mvn sonar:sonar \
  -Dsonar.host.url=http://34.201.93.210:9000 \
  -Dsonar.login=2aee6caf3151d13f13815a1300a1f82646352869
--------------------------------------------------------------
Language which you want todo analysis. In this documentation i had selected java & token name as test

Sonar initial
Ensure you copy the token as we will be using in the future

Configuring Jenkins and sonar to perform Code Analysis
Install SonarQube ScannerFor Jenkins Plugin using Plugins Section Refer 

Navigate to Manage Jenkins => Configure System. Scroll down to sonarqube servers and configure the sonarqube installation as shown 


Configuring Jenkins pipeline to perform sonar qube analysis in Jenkins pipeline
Ensure you have Name of server configured in above section.

In the below section i would be configuring the sonarqube analysis on maven based project from jenkins pipeline

node {

   stage('SCM') {
	  git 'https://github.com/spring-projects/spring-petclinic.git'
   }
   
   stage ('build the packages') {
	  sh 'mvn package'
   }
   
   stage('SonarQube analysis') {
    // performing sonarqube analysis with "withSonarQubeENV(<Name of Server configured in Jenkins>)"
    withSonarQubeEnv('SONAR-6.7.4') {
      // requires SonarQube Scanner for Maven 3.2+
      sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar'
    }
  }

}



>> Next Need to Install Jenkins And Maven and configure the Environmental Variables.
>> Need to pass the Maven Path Jenkins GlobalTool Configuration Section.
>> Write a jenkins file and push to your source code repository.
>> Need to setup Sonar Qube Server in Jenkins Configurations Section, as well as we need to copy the token from
   sonarqube to give jenkins to communicate with sonarqube it act's like a username and password.


Sample Jenkinsfile format:

-------------------------------------------------------------
properties([pipelineTriggers([pollSCM('')])])
node{
    stage('SCM Checkout'){
        git url:'https://github.com/javahometech/my-app', branch: 'master'
    }
    stage('Welcome'){
        print "Build Got triggered, tested"
    }
}
node{
   stage('SCM Checkout'){
     git 'https://github.com/gopigl/sample'
   }
   stage('Compile-Package'){
      // Get maven home path
      def mvnHome =  tool name: 'maven-3', type: 'maven'   
      sh "${mvnHome}/bin/mvn package"
   }
   
   stage('SonarQube Analysis') {
        def mvnHome =  tool name: 'maven-3', type: 'maven'
        withSonarQubeEnv('Sonar') { 
          sh "${mvnHome}/bin/mvn sonar:sonar"
        }
    }

    stage("Quality Gate Statuc Check"){
          timeout(time: 1, unit: 'HOURS') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                   slackSend baseUrl: 'https://hooks.slack.com/services/',
                   channel: '#jenkins-pipeline-demo',
                   color: 'danger', 
                   message: 'SonarQube Analysis Failed', 
                   teamDomain: 'javahomecloud',
                   tokenCredentialId: 'slack-demo'
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
      } 
      
    stage('Deploy to Tomcat'){
      sshagent(['tomcat-dev']) {
         sh 'scp -o StrictHostKeyChecking=no target/*.war ec2-user@172.31.29.242:/opt/tomcat8/webapps/'
      }
   } 
}
----------------------------------------------------------------
